{"version":3,"sources":["component/Weather.js","component/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","className","tempreture","Math","floor","feelslike","tempmin","city","country","humidity","description","error","Form","onSubmit","getWeather","type","placeholder","name","APIKey","App","state","e","a","preventDefault","target","elements","value","fetch","api","json","data","setState","main","temp","feels_like","temp_min","sys","weather","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qPA4CeA,EA3CC,SAACC,GACb,OACI,sBAAKC,UAAU,OAAf,UACKD,EAAME,YAAc,6CAEnB,sBAAMD,UAAU,aAAhB,SAA8BE,KAAKC,MAAMJ,EAAME,WAAW,aAGzDF,EAAME,YAAc,6CAErB,sBAAMD,UAAU,aAAhB,SAA8BE,KAAKC,MAAMJ,EAAMK,UAAU,aAGxDL,EAAME,YAAc,2CAErB,sBAAMD,UAAU,aAAhB,SAA8BE,KAAKC,MAAMJ,EAAMM,QAAQ,aAIzD,oBAAGL,UAAU,WAAb,mBAEC,sBAAMA,UAAU,aAAhB,SAA8BD,EAAMO,UAErC,oBAAGN,UAAU,aAAb,sBAEE,sBAAMA,UAAU,aAAhB,SAA8BD,EAAMQ,aAEtC,oBAAGP,UAAU,aAAb,uBAEE,sBAAMA,UAAU,aAAhB,SAA8BD,EAAMS,cAEtC,oBAAGR,UAAU,aAAb,0BAEE,uBAAMA,UAAU,aAAhB,cAA+BD,EAAMU,kBAEvC,mBAAGT,UAAU,aAAb,SACGD,EAAMW,YC3BNC,EATJ,SAACZ,GACR,OACI,uBAAMa,SAAUb,EAAMc,WAAtB,UACI,uBAAOC,KAAK,OAAOC,YAAY,WAAWC,KAAK,SAC/C,uBAAOF,KAAK,OAAOC,YAAY,cAAcC,KAAK,YAClD,qDCDNC,EAAO,mCAiEEC,E,4MA9DbC,MAAM,CACJlB,WAAW,GACXK,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAERG,W,uCAAW,WAAOO,GAAP,qBAAAC,EAAA,6DAETD,EAAEE,iBACIhB,EAAKc,EAAEG,OAAOC,SAASlB,KAAKmB,MAC5BlB,EAAQa,EAAEG,OAAOC,SAASjB,QAAQkB,MAJ/B,SAKOC,MAAM,qDAAD,OAAsDpB,EAAtD,YAA8DC,EAA9D,kBAA+EU,IAL3F,cAKHU,EALG,gBAMQA,EAAIC,OANZ,OAMHC,EANG,OAOLvB,GAAMC,EACR,EAAKuB,SAAS,CACZ7B,WAAW4B,EAAKE,KAAKC,KACrBC,WAAWJ,EAAKE,KAAKE,WACrBC,SAASL,EAAKE,KAAKG,SACnB5B,KAAKuB,EAAKb,KACVT,QAAQsB,EAAKM,IAAI5B,QACjBC,SAASqB,EAAKE,KAAKvB,SACnBC,YAAYoB,EAAKO,QAAQ,GAAG3B,YAC5BC,MAAM,KAGR,EAAKoB,SAAS,CACZ7B,WAAW,GACXgC,WAAW,GACXC,SAAS,GACT5B,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,wBA3BD,4C,kGAiCX,WACE,OACI,qBAAKV,UAAU,UAAf,SACE,sBAAKA,UAAU,iBAAf,UACA,cAAC,EAAD,CAAMa,WAAYwB,KAAKxB,aACrB,cAAC,EAAD,CACEZ,WAAYoC,KAAKlB,MAAMlB,WACvBG,UAAWiC,KAAKlB,MAAMc,WACtB5B,QAASgC,KAAKlB,MAAMe,SACpB5B,KAAM+B,KAAKlB,MAAMb,KACjBC,QAAS8B,KAAKlB,MAAMZ,QACpBC,SAAU6B,KAAKlB,MAAMX,SACrBC,YAAa4B,KAAKlB,MAAMV,YACxBC,MAAO2B,KAAKlB,MAAMT,iB,GAvDd4B,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,SAChDZ,M","file":"static/js/main.f688ee59.chunk.js","sourcesContent":["import React from \"react\";\r\n  const Weather=(props)=>{\r\n    return(\r\n        <div className=\"info\">\r\n            {props.tempreture && <p> \r\n              tempreture : \r\n              <span className=\"info-value\">{Math.floor(props.tempreture-273.15)}</span>\r\n              </p>}\r\n              \r\n              {props.tempreture && <p> \r\n                feels like : \r\n              <span className=\"info-value\">{Math.floor(props.feelslike-273.15)}</span>\r\n              </p>}\r\n\r\n              {props.tempreture && <p> \r\n                temp min : \r\n              <span className=\"info-value\">{Math.floor(props.tempmin-273.15)}</span>\r\n              </p>}\r\n\r\n             \r\n            <p className=\"info-key\">\r\n              City :\r\n             <span className=\"info-value\">{props.city}</span> \r\n            </p>\r\n            <p className=\"info-value\">\r\n              Country :\r\n              <span className=\"info-value\">{props.country}</span>\r\n              </p>\r\n            <p className=\"info-value\"> \r\n              humidity : \r\n              <span className=\"info-value\">{props.humidity}</span>\r\n              </p>\r\n            <p className=\"info-value\"> \r\n              description : \r\n              <span className=\"info-value\"> {props.description}</span>\r\n              </p>\r\n            <p className=\"info-value\">\r\n              {props.error}\r\n              </p>\r\n        </div>\r\n    )\r\n    \r\n  } \r\n\r\nexport default Weather;","import React from 'react';\r\nconst Form=(props)=>{\r\n    return(\r\n        <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" placeholder=\"City ...\" name=\"city\"/>\r\n            <input type=\"text\" placeholder=\"Country ...\" name=\"country\"/>\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\nexport default Form;","import { Component } from 'react';\nimport './App.css';\nimport Weather from './component/Weather';\nimport Form from './component/Form';\nimport { Footer } from './component/Footer';\nconst APIKey='fe88e17f0bf5e600ee23c9a380f63700';\n//http://api.openweathermap.org/data/2.5/weather?q=cairo%2Cegypt&appid=e36ed364400282e43250b6c4c0274d44\nclass App extends Component {\n  state={\n    tempreture:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:''\n  }\n  getWeather=async (e)=>{\n    // non Reload page \n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    const api=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${APIKey}`);\n    const data=await api.json();\n    if (city&&country) {\n      this.setState({\n        tempreture:data.main.temp,\n        feels_like:data.main.feels_like,\n        temp_min:data.main.temp_min,\n        city:data.name,\n        country:data.sys.country,\n        humidity:data.main.humidity,\n        description:data.weather[0].description,\n        error:''\n      })\n    } else {\n      this.setState({\n        tempreture:'',\n        feels_like:'',\n        temp_min:'',\n        city:'',\n        country:'',\n        humidity:'',\n        description:'',\n        error:'please Enter County'\n      })\n      \n    }\n   \n  }\n  render(){\n    return(\n        <div className=\"weather\"> \n          <div className=\"form-container\">\n          <Form getWeather={this.getWeather}/>\n            <Weather\n              tempreture={this.state.tempreture}\n              feelslike={this.state.feels_like}\n              tempmin={this.state.temp_min}\n              city={this.state.city}\n              country={this.state.country}\n              humidity={this.state.humidity}\n              description={this.state.description}\n              error={this.state.error}\n              />     \n          </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,document.getElementById('root'));\nreportWebVitals();\n"],"sourceRoot":""}